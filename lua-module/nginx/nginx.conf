
user  nginx;
worker_processes  1;

error_log  /dev/stderr;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format json escape=json '{"time": "$time_iso8601",'
      '"host": "$remote_addr",'
      '"vhost": "$host",'
      '"user": "$remote_user",'
      '"status": "$status",'
      '"protocol": "$server_protocol",'
      '"method": "$request_method",'
      '"path": "$request_uri",'
      '"req": "$request",'
      '"size": "$body_bytes_sent",'
      '"reqtime": "$request_time",'
      '"apptime": "$upstream_response_time",'
      '"ua": "$http_user_agent",'
      '"forwardedfor": "$http_x_forwarded_for",'
      '"forwardedproto": "$http_x_forwarded_proto",'
      '"referrer": "$http_referer"}';

    sendfile        off;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # lua prometheus metric
    lua_shared_dict prometheus_metrics 10M;
    lua_package_path '/etc/nginx/prometheus.lua';
    init_by_lua_block {
        prometheus = require("prometheus").init("prometheus_metrics")
        metric_requests = prometheus:counter(
            "nginx_http_requests_total", "Number of HTTP requests", {"host", "status"})
        metric_latency = prometheus:histogram(
            "nginx_http_request_duration_seconds", "HTTP request latency", {"host"})
        metric_connections = prometheus:gauge(
            "nginx_http_connections", "Number of HTTP connections", {"state"})
    
        function split(str, pat)
            local t = {}  -- NOTE: use {n = 0} in Lua-5.0
            local fpat = "(.-)" .. pat
            local last_end = 1
            local s, e, cap = str:find(fpat, 1)
            while s do
                if s ~= 1 or cap ~= "" then
                    table.insert(t,cap)
                end
                last_end = e+1
                s, e, cap = str:find(fpat, last_end)
            end
            if last_end <= #str then
                cap = str:sub(last_end)
                table.insert(t, cap)
            end
            return t
        end
    }
    
    log_by_lua_block {
        metric_requests:inc(1, {ngx.var.server_name, ngx.var.status})
        metric_latency:observe(tonumber(ngx.var.request_time), {ngx.var.server_name})
    }

    server {
        listen       80;
        server_name  localhost-1;

        access_log  /dev/stdout json;
        error_log   /dev/stderr;
        client_body_buffer_size 10m;
        client_max_body_size    10m;
        
        location / {
             root   /usr/share/nginx/html;
             index  index.html index.htm;

             proxy_buffering off;
             proxy_set_header X-Real-IP $remote_addr;
             proxy_set_header Host $host;
             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }

        location /nginx_status {
            access_log  /dev/null;
            stub_status;
        }
    
        location /metrics {
            access_log  /dev/null;
            content_by_lua_block {
                metric_connections:set(ngx.var.connections_reading, {"reading"})
                metric_connections:set(ngx.var.connections_waiting, {"waiting"})
                metric_connections:set(ngx.var.connections_writing, {"writing"})
                prometheus:collect()
            }
        }
    }
}
